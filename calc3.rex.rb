#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "calc3.rex".
#++

require 'racc/parser'
#
# calc3.rex
# lexical scanner definition for rex
#
require './myl.rb'
class Calculator3 < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/\s+/))
        ;

      when (text = @ss.scan(/else/))
         action { [:TOKENELSE, text]}

      when (text = @ss.scan(/if/))
         action { [:TOKENIF, text]}

      when (text = @ss.scan(/def/))
         action { [:TOKFUNCTION, text] }

      when (text = @ss.scan(/when/))
         action { [:TOKENCASE, text] }

      when (text = @ss.scan(/case/))
         action { [:TOKENSWITCH, text]}

      when (text = @ss.scan(/Signal/))
         action { [:TOKENDEF, text] }

      when (text = @ss.scan(/end/))
         action { [:TOKENEND, text] }

      when (text = @ss.scan(/var/))
         action { [:TOKENVAR, text] }

      when (text = @ss.scan(/foreach/))
         action { [:TOKENFOREACH, text]}

      when (text = @ss.scan(/\d+/))
         action { [:NUMBER, text.to_i] }

      when (text = @ss.scan(/[a-zA-Z_][a-zA-Z0-9_]*/))
         action { sym = $SymTable.get_by_name(text)
                    p "debug rex: sym - find #{text}"
                    p sym
                    return [sym.type.to_sym, text] unless sym.nil?
                    [:WORD, text]
                  }


      when (text = @ss.scan(/.|\n/))
         action { [text, text] }

      when (text = @ss.scan(/\(/))
         action { ['('] }

      when (text = @ss.scan(/\)/))
         action { [')'] }

      when (text = @ss.scan(/\,/))
         action { [','] }

      when (text = @ss.scan(/\[/))
         action { ['['] }

      when (text = @ss.scan(/\]/))
         action { [']'] }

      when (text = @ss.scan(/\=/))
         action { ['='] }

      when (text = @ss.scan(/\:/))
         action { [':'] }

      when (text = @ss.scan(/\>/))
         action { ['>'] }

      when (text = @ss.scan(/\</))
         action { ['<'] }

      when (text = @ss.scan(/\!/))
         action { ['!'] }

      when (text = @ss.scan(/\&/))
         action { ['&'] }

      when (text = @ss.scan(/\|/))
         action { ['|'] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

end # class
